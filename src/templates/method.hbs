{{module_name}}.prototype.{{rel}} = function(config) {
    config = $.extend(true, {}, this.CONFIG, config || {});
    config = this.apply_{{rel}}_defaults(config);
    if (this.is_valid_{{rel}}(config)) {
        var url = this.CONFIG.base_url + {{{url}}},
            data = {{{data}}};

        var key = JSON.stringify($.extend({url: url}, data));
        var v = amplify.store.sessionStorage(key);

        {{#if q}}
            if ( v === undefined) {
                return Q($.ajax({
                    url: url,
                    /*
                        <!-- TODO: this should be an option in the schema -->
                    */
                    traditional: true,
                    {{#if isObject}}
                        data: JSON.stringify({{{data}}}),
                        contentType: "application/json",
                        /*
                            dataType : "json"
                        */
                    {{else}}
                        data: data,
                    {{/if}}
                    type: {{{method}}}
                })).then(function (d) {
                    <!-- TODO: this should be at the schema level for each request and not a global one -->
                    {{#if cache}}
                    try {
                        amplify.store.sessionStorage(key, d);
                    }catch(e) {
                       /*
                            <!-- catching for quota exceed-->
                            <!--console.error(e);-->
                        */
                    }
                    {{/if}}
                    return d;
                });
            }else {
                return Q.when(v);
            }

        {{else}}
            $.ajax({
                url: this.CONFIG.base_url + {{{url}}},
                traditional: true,
                {{#if isObject}}
                    data: JSON.stringify({{{data}}}),
                    contentType: "application/json",
                    /*
                        <!-- should not the forced the dataType, i.e. when there is csv could bring some error -->
                        dataType : "json",
                    */
                {{else}}
                    data: {{{data}}},
                {{/if}}
                type: {{{method}}},
                success: config.success,
                error: config.error,
                context: config.context,
                always: config.always
            });
        {{/if}}
    }
    throw 400;
};

{{#if isObject}}
    {{module_name}}.prototype.is_valid_{{rel}} = function(config) {
        return true;
    };
{{else}}
    {{module_name}}.prototype.is_valid_{{rel}} = function(config) {
        var parameters = [{{{parameters}}}], i;
        for (i = 0; i < parameters.length; i += 1) {
            if (config[parameters[i]] === undefined) {
                throw 'Parameter "' + parameters[i] + '" is undefined. Please check your request.';
            }
        }
        return true;
    };
{{/if}}

{{module_name}}.prototype.apply_{{rel}}_defaults = function (config) {
    var i,
        parameters = [{{{parameters}}}],
        defaults = {
            {{{defaults}}}
        },
        key;
    for (i = 0; i < Object.keys(defaults).length; i += 1) {
        if (defaults[Object.keys(defaults)[i]] === '[]') {
            defaults[Object.keys(defaults)[i]] = [];
        }
    }
    for (i = 0; i < parameters.length; i += 1) {
        key =  parameters[i];
        try {
            config[key] = config[key] !== undefined ? config[key] : defaults[key];
        } catch (ignore) {
            /* No default value available for this parameter. */
        }
    }
    return config;
};
